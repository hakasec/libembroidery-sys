/* automatically generated by rust-bindgen */

pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const CompoundFileSector_MaxRegSector: u32 = 4294967290;
pub const CompoundFileSector_DIFAT_Sector: u32 = 4294967292;
pub const CompoundFileSector_FAT_Sector: u32 = 4294967293;
pub const CompoundFileSector_EndOfChain: u32 = 4294967294;
pub const CompoundFileSector_FreeSector: u32 = 4294967295;
pub const ObjectTypeUnknown: u32 = 0;
pub const ObjectTypeStorage: u32 = 1;
pub const ObjectTypeStream: u32 = 2;
pub const ObjectTypeRootEntry: u32 = 5;
pub const CompoundFileStreamId_MaxRegularStreamId: u32 = 4294967290;
pub const CompoundFileStreamId_NoStream: u32 = 4294967295;
pub const LINETO: u32 = 0;
pub const MOVETO: u32 = 1;
pub const BULGETOCONTROL: u32 = 2;
pub const BULGETOEND: u32 = 4;
pub const ELLIPSETORAD: u32 = 8;
pub const ELLIPSETOEND: u32 = 16;
pub const CUBICTOCONTROL1: u32 = 32;
pub const CUBICTOCONTROL2: u32 = 64;
pub const CUBICTOEND: u32 = 128;
pub const QUADTOCONTROL: u32 = 256;
pub const QUADTOEND: u32 = 512;
pub const NORMAL: u32 = 0;
pub const JUMP: u32 = 1;
pub const TRIM: u32 = 2;
pub const STOP: u32 = 4;
pub const SEQUIN: u32 = 8;
pub const END: u32 = 16;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _133: u32 = 16;
pub const _135: u32 = 3;
pub const _136: u32 = 16384;
pub const _137: u32 = 14;
pub const _138: u32 = 10;
pub const _139: u32 = 8;
pub const _140: u32 = 256;
pub const byte_MAX: u32 = 255;
pub const _141: u32 = 511;
pub const _142: u32 = 15;
pub const _143: u32 = 9;
pub const _144: u32 = 257;
pub const _145: u32 = 19;
pub const _147: u32 = 5;
pub const _148: u32 = 4096;
pub const _149: u32 = 256;
pub const _152: u32 = 19;
pub const _153: u32 = 4096;
pub const _154: u32 = 4;
pub const _155: u32 = 8192;
pub const _156: u32 = 512;
pub const _157: i32 = -1;
pub const _158: u32 = 128;
pub const _159: u32 = 512;
pub const _540: u32 = 5;
pub const bufferSize: u32 = 512;
pub const EMBFORMAT_UNSUPPORTED: u32 = 0;
pub const EMBFORMAT_STITCHONLY: u32 = 1;
pub const EMBFORMAT_OBJECTONLY: u32 = 2;
pub const EMBFORMAT_STCHANDOBJ: u32 = 3;
pub const EMBFORMAT_MAXEXT: u32 = 3;
pub const PI: f64 = 3.1415926535;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]; 4usize ] , _bindgen_union_align : u32 , }#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {# [ link_name = "\u{1}stdin" ]    pub static mut stdin: *mut FILE;
}
extern "C" {# [ link_name = "\u{1}stdout" ]    pub static mut stdout: *mut FILE;
}
extern "C" {# [ link_name = "\u{1}stderr" ]    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}__isoc99_fscanf" ]    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}__isoc99_scanf" ]    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}__isoc99_sscanf" ]    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}__isoc99_vfscanf" ]    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}__isoc99_vscanf" ]    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}__isoc99_vsscanf" ]    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {# [ link_name = "\u{1}sys_nerr" ]    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}sys_errlist" ]    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbFile_ {
    pub file: *mut FILE,
}
#[test]
fn bindgen_test_layout_EmbFile_() {
    assert_eq!(
        ::std::mem::size_of::<EmbFile_>(),
        8usize,
        concat!("Size of: ", stringify!(EmbFile_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbFile_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbFile_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFile_>())).file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFile_),
            "::",
            stringify!(file)
        )
    );
}
pub type EmbFile = EmbFile_;
extern "C" {
    pub fn embFile_open(
        fileName: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut EmbFile;
}
extern "C" {
    pub fn embFile_close(stream: *mut EmbFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFile_eof(stream: *mut EmbFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFile_getc(stream: *mut EmbFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFile_read(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        nmemb: usize,
        stream: *mut EmbFile,
    ) -> usize;
}
extern "C" {
    pub fn embFile_write(
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        nmemb: usize,
        stream: *mut EmbFile,
    ) -> usize;
}
extern "C" {
    pub fn embFile_seek(
        stream: *mut EmbFile,
        offset: ::std::os::raw::c_long,
        origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFile_tell(stream: *mut EmbFile) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn embFile_tmpfile() -> *mut EmbFile;
}
extern "C" {
    pub fn embFile_putc(ch: ::std::os::raw::c_int, stream: *mut EmbFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFile_printf(
        stream: *mut EmbFile,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _bcf_file_difat {
    pub fatSectorCount: ::std::os::raw::c_uint,
    pub fatSectorEntries: [::std::os::raw::c_uint; 109usize],
    pub sectorSize: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bcf_file_difat() {
    assert_eq!(
        ::std::mem::size_of::<_bcf_file_difat>(),
        444usize,
        concat!("Size of: ", stringify!(_bcf_file_difat))
    );
    assert_eq!(
        ::std::mem::align_of::<_bcf_file_difat>(),
        4usize,
        concat!("Alignment of ", stringify!(_bcf_file_difat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_difat>())).fatSectorCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_difat),
            "::",
            stringify!(fatSectorCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_difat>())).fatSectorEntries as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_difat),
            "::",
            stringify!(fatSectorEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_difat>())).sectorSize as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_difat),
            "::",
            stringify!(sectorSize)
        )
    );
}
pub type bcf_file_difat = _bcf_file_difat;
extern "C" {
    pub fn bcf_difat_create(
        file: *mut EmbFile,
        fatSectors: ::std::os::raw::c_uint,
        sectorSize: ::std::os::raw::c_uint,
    ) -> *mut bcf_file_difat;
}
extern "C" {
    pub fn readFullSector(
        file: *mut EmbFile,
        bcfFile: *mut bcf_file_difat,
        numberOfDifatEntriesStillToRead: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn numberOfEntriesInDifatSector(fat: *mut bcf_file_difat) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn bcf_file_difat_free(difat: *mut bcf_file_difat);
}
pub const NumberOfDifatEntriesInHeader: ::std::os::raw::c_uint = 109;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbTime_ {
    pub year: ::std::os::raw::c_uint,
    pub month: ::std::os::raw::c_uint,
    pub day: ::std::os::raw::c_uint,
    pub hour: ::std::os::raw::c_uint,
    pub minute: ::std::os::raw::c_uint,
    pub second: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_EmbTime_() {
    assert_eq!(
        ::std::mem::size_of::<EmbTime_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbTime_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbTime_>(),
        4usize,
        concat!("Alignment of ", stringify!(EmbTime_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbTime_>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbTime_),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbTime_>())).month as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbTime_),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbTime_>())).day as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbTime_),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbTime_>())).hour as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbTime_),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbTime_>())).minute as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbTime_),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbTime_>())).second as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbTime_),
            "::",
            stringify!(second)
        )
    );
}
pub type EmbTime = EmbTime_;
extern "C" {
    pub fn embTime_initNow(t: *mut EmbTime);
}
extern "C" {
    pub fn embTime_time(t: *mut EmbTime) -> EmbTime;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bcf_directory_entry {
    pub directoryEntryName: [::std::os::raw::c_char; 32usize],
    pub directoryEntryNameLength: ::std::os::raw::c_ushort,
    pub objectType: ::std::os::raw::c_uchar,
    pub colorFlag: ::std::os::raw::c_uchar,
    pub leftSiblingId: ::std::os::raw::c_uint,
    pub rightSiblingId: ::std::os::raw::c_uint,
    pub childId: ::std::os::raw::c_uint,
    pub CLSID: [::std::os::raw::c_uchar; 16usize],
    pub stateBits: ::std::os::raw::c_uint,
    pub creationTime: EmbTime,
    pub modifiedTime: EmbTime,
    pub startingSectorLocation: ::std::os::raw::c_uint,
    pub streamSize: ::std::os::raw::c_ulong,
    pub streamSizeHigh: ::std::os::raw::c_uint,
    pub next: *mut _bcf_directory_entry,
}
#[test]
fn bindgen_test_layout__bcf_directory_entry() {
    assert_eq!(
        ::std::mem::size_of::<_bcf_directory_entry>(),
        144usize,
        concat!("Size of: ", stringify!(_bcf_directory_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_bcf_directory_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_bcf_directory_entry))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_directory_entry>())).directoryEntryName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(directoryEntryName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_directory_entry>())).directoryEntryNameLength as
                *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(directoryEntryNameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).objectType as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).colorFlag as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(colorFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).leftSiblingId as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(leftSiblingId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).rightSiblingId as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(rightSiblingId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).childId as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(childId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).CLSID as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(CLSID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).stateBits as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(stateBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).creationTime as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(creationTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).modifiedTime as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(modifiedTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_directory_entry>())).startingSectorLocation as *const _ as
                usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(startingSectorLocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).streamSize as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(streamSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).streamSizeHigh as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(streamSizeHigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory_entry>())).next as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory_entry),
            "::",
            stringify!(next)
        )
    );
}
pub type bcf_directory_entry = _bcf_directory_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bcf_directory {
    pub dirEntries: *mut bcf_directory_entry,
    pub maxNumberOfDirectoryEntries: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bcf_directory() {
    assert_eq!(
        ::std::mem::size_of::<_bcf_directory>(),
        16usize,
        concat!("Size of: ", stringify!(_bcf_directory))
    );
    assert_eq!(
        ::std::mem::align_of::<_bcf_directory>(),
        8usize,
        concat!("Alignment of ", stringify!(_bcf_directory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_directory>())).dirEntries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory),
            "::",
            stringify!(dirEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_directory>())).maxNumberOfDirectoryEntries as *const _ as
                usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_directory),
            "::",
            stringify!(maxNumberOfDirectoryEntries)
        )
    );
}
pub type bcf_directory = _bcf_directory;
extern "C" {
    pub fn CompoundFileDirectoryEntry(file: *mut EmbFile) -> *mut bcf_directory_entry;
}
extern "C" {
    pub fn CompoundFileDirectory(
        maxNumberOfDirectoryEntries: ::std::os::raw::c_uint,
    ) -> *mut bcf_directory;
}
extern "C" {
    pub fn readNextSector(file: *mut EmbFile, dir: *mut bcf_directory);
}
extern "C" {
    pub fn bcf_directory_free(dir: *mut bcf_directory);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _bcf_file_fat {
    pub fatEntryCount: ::std::os::raw::c_int,
    pub fatEntries: [::std::os::raw::c_uint; 255usize],
    pub numberOfEntriesInFatSector: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bcf_file_fat() {
    assert_eq!(
        ::std::mem::size_of::<_bcf_file_fat>(),
        1028usize,
        concat!("Size of: ", stringify!(_bcf_file_fat))
    );
    assert_eq!(
        ::std::mem::align_of::<_bcf_file_fat>(),
        4usize,
        concat!("Alignment of ", stringify!(_bcf_file_fat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_fat>())).fatEntryCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_fat),
            "::",
            stringify!(fatEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_fat>())).fatEntries as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_fat),
            "::",
            stringify!(fatEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_fat>())).numberOfEntriesInFatSector as *const _ as
                usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_fat),
            "::",
            stringify!(numberOfEntriesInFatSector)
        )
    );
}
pub type bcf_file_fat = _bcf_file_fat;
extern "C" {
    pub fn bcfFileFat_create(sectorSize: ::std::os::raw::c_uint) -> *mut bcf_file_fat;
}
extern "C" {
    pub fn loadFatFromSector(fat: *mut bcf_file_fat, file: *mut EmbFile);
}
extern "C" {
    pub fn bcf_file_fat_free(fat: *mut bcf_file_fat);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bcf_file_header {
    pub signature: [::std::os::raw::c_uchar; 8usize],
    pub CLSID: [::std::os::raw::c_uchar; 16usize],
    pub minorVersion: ::std::os::raw::c_ushort,
    pub majorVersion: ::std::os::raw::c_ushort,
    pub byteOrder: ::std::os::raw::c_ushort,
    pub sectorShift: ::std::os::raw::c_ushort,
    pub miniSectorShift: ::std::os::raw::c_ushort,
    pub reserved1: ::std::os::raw::c_ushort,
    pub reserved2: ::std::os::raw::c_uint,
    pub numberOfDirectorySectors: ::std::os::raw::c_uint,
    pub numberOfFATSectors: ::std::os::raw::c_uint,
    pub firstDirectorySectorLocation: ::std::os::raw::c_uint,
    pub transactionSignatureNumber: ::std::os::raw::c_uint,
    pub miniStreamCutoffSize: ::std::os::raw::c_uint,
    pub firstMiniFATSectorLocation: ::std::os::raw::c_uint,
    pub numberOfMiniFatSectors: ::std::os::raw::c_uint,
    pub firstDifatSectorLocation: ::std::os::raw::c_uint,
    pub numberOfDifatSectors: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bcf_file_header() {
    assert_eq!(
        ::std::mem::size_of::<_bcf_file_header>(),
        76usize,
        concat!("Size of: ", stringify!(_bcf_file_header))
    );
    assert_eq!(
        ::std::mem::align_of::<_bcf_file_header>(),
        4usize,
        concat!("Alignment of ", stringify!(_bcf_file_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).signature as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).CLSID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(CLSID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).minorVersion as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(minorVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).majorVersion as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(majorVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).byteOrder as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(byteOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).sectorShift as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(sectorShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).miniSectorShift as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(miniSectorShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).reserved1 as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).reserved2 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_header>())).numberOfDirectorySectors as *const _ as
                usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(numberOfDirectorySectors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file_header>())).numberOfFATSectors as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(numberOfFATSectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_header>())).firstDirectorySectorLocation as
                *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(firstDirectorySectorLocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_header>())).transactionSignatureNumber as *const _ as
                usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(transactionSignatureNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_header>())).miniStreamCutoffSize as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(miniStreamCutoffSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_header>())).firstMiniFATSectorLocation as *const _ as
                usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(firstMiniFATSectorLocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_header>())).numberOfMiniFatSectors as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(numberOfMiniFatSectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_header>())).firstDifatSectorLocation as *const _ as
                usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(firstDifatSectorLocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_bcf_file_header>())).numberOfDifatSectors as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file_header),
            "::",
            stringify!(numberOfDifatSectors)
        )
    );
}
pub type bcf_file_header = _bcf_file_header;
extern "C" {
    pub fn bcfFileHeader_read(file: *mut EmbFile) -> bcf_file_header;
}
extern "C" {
    pub fn bcfFileHeader_isValid(header: bcf_file_header) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bcf_file {
    pub header: bcf_file_header,
    /// The header for the CompoundFile
    pub difat: *mut bcf_file_difat,
    /// The "Double Indirect FAT" for the CompoundFile
    pub fat: *mut bcf_file_fat,
    /// The File Allocation Table for the Compound File
    pub directory: *mut bcf_directory,
}
#[test]
fn bindgen_test_layout__bcf_file() {
    assert_eq!(
        ::std::mem::size_of::<_bcf_file>(),
        104usize,
        concat!("Size of: ", stringify!(_bcf_file))
    );
    assert_eq!(
        ::std::mem::align_of::<_bcf_file>(),
        8usize,
        concat!("Alignment of ", stringify!(_bcf_file))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file>())).difat as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file),
            "::",
            stringify!(difat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file>())).fat as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file),
            "::",
            stringify!(fat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_bcf_file>())).directory as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_bcf_file),
            "::",
            stringify!(directory)
        )
    );
}
pub type bcf_file = _bcf_file;
extern "C" {
    pub fn bcfFile_read(file: *mut EmbFile, bcfFile: *mut bcf_file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetFile(
        bcfFile: *mut bcf_file,
        file: *mut EmbFile,
        fileToFind: *mut ::std::os::raw::c_char,
    ) -> *mut EmbFile;
}
extern "C" {
    pub fn bcf_file_free(bcfFile: *mut bcf_file);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbColor_ {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_EmbColor_() {
    assert_eq!(
        ::std::mem::size_of::<EmbColor_>(),
        3usize,
        concat!("Size of: ", stringify!(EmbColor_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbColor_>(),
        1usize,
        concat!("Alignment of ", stringify!(EmbColor_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbColor_>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbColor_),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbColor_>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbColor_),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbColor_>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbColor_),
            "::",
            stringify!(b)
        )
    );
}
pub type EmbColor = EmbColor_;
extern "C" {
    pub fn embColor_make(
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
    ) -> EmbColor;
}
extern "C" {
    pub fn embColor_create(
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
    ) -> *mut EmbColor;
}
extern "C" {
    pub fn embColor_fromHexStr(val: *mut ::std::os::raw::c_char) -> EmbColor;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbArc_ {
    pub startX: f64,
    pub startY: f64,
    pub midX: f64,
    pub midY: f64,
    pub endX: f64,
    pub endY: f64,
}
#[test]
fn bindgen_test_layout_EmbArc_() {
    assert_eq!(
        ::std::mem::size_of::<EmbArc_>(),
        48usize,
        concat!("Size of: ", stringify!(EmbArc_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbArc_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbArc_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArc_>())).startX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArc_),
            "::",
            stringify!(startX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArc_>())).startY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArc_),
            "::",
            stringify!(startY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArc_>())).midX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArc_),
            "::",
            stringify!(midX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArc_>())).midY as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArc_),
            "::",
            stringify!(midY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArc_>())).endX as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArc_),
            "::",
            stringify!(endX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArc_>())).endY as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArc_),
            "::",
            stringify!(endY)
        )
    );
}
pub type EmbArc = EmbArc_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbArcObject_ {
    pub arc: EmbArc,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbArcObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbArcObject_>(),
        56usize,
        concat!("Size of: ", stringify!(EmbArcObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbArcObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbArcObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArcObject_>())).arc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArcObject_),
            "::",
            stringify!(arc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArcObject_>())).lineType as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArcObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArcObject_>())).color as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArcObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbArcObject = EmbArcObject_;
extern "C" {
    pub fn embArcObject_make(sx: f64, sy: f64, mx: f64, my: f64, ex: f64, ey: f64) -> EmbArcObject;
}
extern "C" {
    pub fn embArcObject_create(
        sx: f64,
        sy: f64,
        mx: f64,
        my: f64,
        ex: f64,
        ey: f64,
    ) -> *mut EmbArcObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbArcObjectList_ {
    pub arcObj: EmbArcObject,
    pub next: *mut EmbArcObjectList_,
}
#[test]
fn bindgen_test_layout_EmbArcObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbArcObjectList_>(),
        64usize,
        concat!("Size of: ", stringify!(EmbArcObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbArcObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbArcObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArcObjectList_>())).arcObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArcObjectList_),
            "::",
            stringify!(arcObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbArcObjectList_>())).next as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbArcObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbArcObjectList = EmbArcObjectList_;
extern "C" {
    pub fn embArcObjectList_add(
        pointer: *mut EmbArcObjectList,
        data: EmbArcObject,
    ) -> *mut EmbArcObjectList;
}
extern "C" {
    pub fn embArcObjectList_count(pointer: *mut EmbArcObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embArcObjectList_empty(pointer: *mut EmbArcObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embArcObjectList_free(pointer: *mut EmbArcObjectList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbCircle_ {
    pub centerX: f64,
    pub centerY: f64,
    pub radius: f64,
}
#[test]
fn bindgen_test_layout_EmbCircle_() {
    assert_eq!(
        ::std::mem::size_of::<EmbCircle_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbCircle_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbCircle_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbCircle_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbCircle_>())).centerX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbCircle_),
            "::",
            stringify!(centerX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbCircle_>())).centerY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbCircle_),
            "::",
            stringify!(centerY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbCircle_>())).radius as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbCircle_),
            "::",
            stringify!(radius)
        )
    );
}
pub type EmbCircle = EmbCircle_;
extern "C" {
    pub fn embCircle_centerX(circle: EmbCircle) -> f64;
}
extern "C" {
    pub fn embCircle_centerY(circle: EmbCircle) -> f64;
}
extern "C" {
    pub fn embCircle_radius(circle: EmbCircle) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbCircleObject_ {
    pub circle: EmbCircle,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbCircleObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbCircleObject_>(),
        32usize,
        concat!("Size of: ", stringify!(EmbCircleObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbCircleObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbCircleObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbCircleObject_>())).circle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbCircleObject_),
            "::",
            stringify!(circle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbCircleObject_>())).lineType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbCircleObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbCircleObject_>())).color as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbCircleObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbCircleObject = EmbCircleObject_;
extern "C" {
    pub fn embCircleObject_make(cx: f64, cy: f64, r: f64) -> EmbCircleObject;
}
extern "C" {
    pub fn embCircleObject_create(cx: f64, cy: f64, r: f64) -> *mut EmbCircleObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbCircleObjectList_ {
    pub circleObj: EmbCircleObject,
    pub next: *mut EmbCircleObjectList_,
}
#[test]
fn bindgen_test_layout_EmbCircleObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbCircleObjectList_>(),
        40usize,
        concat!("Size of: ", stringify!(EmbCircleObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbCircleObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbCircleObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbCircleObjectList_>())).circleObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbCircleObjectList_),
            "::",
            stringify!(circleObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbCircleObjectList_>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbCircleObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbCircleObjectList = EmbCircleObjectList_;
extern "C" {
    pub fn embCircleObjectList_create(data: EmbCircleObject) -> *mut EmbCircleObjectList;
}
extern "C" {
    pub fn embCircleObjectList_add(
        pointer: *mut EmbCircleObjectList,
        data: EmbCircleObject,
    ) -> *mut EmbCircleObjectList;
}
extern "C" {
    pub fn embCircleObjectList_count(pointer: *mut EmbCircleObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embCircleObjectList_empty(pointer: *mut EmbCircleObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embCircleObjectList_free(pointer: *mut EmbCircleObjectList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbEllipse_ {
    pub centerX: f64,
    pub centerY: f64,
    pub radiusX: f64,
    pub radiusY: f64,
}
#[test]
fn bindgen_test_layout_EmbEllipse_() {
    assert_eq!(
        ::std::mem::size_of::<EmbEllipse_>(),
        32usize,
        concat!("Size of: ", stringify!(EmbEllipse_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbEllipse_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbEllipse_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipse_>())).centerX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipse_),
            "::",
            stringify!(centerX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipse_>())).centerY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipse_),
            "::",
            stringify!(centerY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipse_>())).radiusX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipse_),
            "::",
            stringify!(radiusX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipse_>())).radiusY as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipse_),
            "::",
            stringify!(radiusY)
        )
    );
}
pub type EmbEllipse = EmbEllipse_;
extern "C" {
    pub fn embEllipse_centerX(ellipse: EmbEllipse) -> f64;
}
extern "C" {
    pub fn embEllipse_centerY(ellipse: EmbEllipse) -> f64;
}
extern "C" {
    pub fn embEllipse_radiusX(ellipse: EmbEllipse) -> f64;
}
extern "C" {
    pub fn embEllipse_radiusY(ellipse: EmbEllipse) -> f64;
}
extern "C" {
    pub fn embEllipse_diameterX(ellipse: EmbEllipse) -> f64;
}
extern "C" {
    pub fn embEllipse_diameterY(ellipse: EmbEllipse) -> f64;
}
extern "C" {
    pub fn embEllipse_width(ellipse: EmbEllipse) -> f64;
}
extern "C" {
    pub fn embEllipse_height(ellipse: EmbEllipse) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbEllipseObject_ {
    pub ellipse: EmbEllipse,
    pub rotation: f64,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbEllipseObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbEllipseObject_>(),
        48usize,
        concat!("Size of: ", stringify!(EmbEllipseObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbEllipseObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbEllipseObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipseObject_>())).ellipse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipseObject_),
            "::",
            stringify!(ellipse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipseObject_>())).rotation as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipseObject_),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipseObject_>())).lineType as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipseObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipseObject_>())).color as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipseObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbEllipseObject = EmbEllipseObject_;
extern "C" {
    pub fn embEllipseObject_make(cx: f64, cy: f64, rx: f64, ry: f64) -> EmbEllipseObject;
}
extern "C" {
    pub fn embEllipseObject_create(cx: f64, cy: f64, rx: f64, ry: f64) -> *mut EmbEllipseObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbEllipseObjectList_ {
    pub ellipseObj: EmbEllipseObject,
    pub next: *mut EmbEllipseObjectList_,
}
#[test]
fn bindgen_test_layout_EmbEllipseObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbEllipseObjectList_>(),
        56usize,
        concat!("Size of: ", stringify!(EmbEllipseObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbEllipseObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbEllipseObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipseObjectList_>())).ellipseObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipseObjectList_),
            "::",
            stringify!(ellipseObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbEllipseObjectList_>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbEllipseObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbEllipseObjectList = EmbEllipseObjectList_;
extern "C" {
    pub fn embEllipseObjectList_create(data: EmbEllipseObject) -> *mut EmbEllipseObjectList;
}
extern "C" {
    pub fn embEllipseObjectList_add(
        pointer: *mut EmbEllipseObjectList,
        data: EmbEllipseObject,
    ) -> *mut EmbEllipseObjectList;
}
extern "C" {
    pub fn embEllipseObjectList_count(pointer: *mut EmbEllipseObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embEllipseObjectList_empty(pointer: *mut EmbEllipseObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embEllipseObjectList_free(pointer: *mut EmbEllipseObjectList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbHoop_ {
    pub width: f64,
    pub height: f64,
}
#[test]
fn bindgen_test_layout_EmbHoop_() {
    assert_eq!(
        ::std::mem::size_of::<EmbHoop_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbHoop_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbHoop_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbHoop_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbHoop_>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbHoop_),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbHoop_>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbHoop_),
            "::",
            stringify!(height)
        )
    );
}
pub type EmbHoop = EmbHoop_;
extern "C" {
    pub fn embHoop_width(hoop: EmbHoop) -> f64;
}
extern "C" {
    pub fn embHoop_height(hoop: EmbHoop) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbVector_ {
    pub X: f64,
    pub Y: f64,
}
#[test]
fn bindgen_test_layout_EmbVector_() {
    assert_eq!(
        ::std::mem::size_of::<EmbVector_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbVector_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbVector_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbVector_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbVector_>())).X as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbVector_),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbVector_>())).Y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbVector_),
            "::",
            stringify!(Y)
        )
    );
}
pub type EmbVector = EmbVector_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbVectorList_ {
    pub vector: EmbVector,
    pub next: *mut EmbVectorList_,
}
#[test]
fn bindgen_test_layout_EmbVectorList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbVectorList_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbVectorList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbVectorList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbVectorList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbVectorList_>())).vector as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbVectorList_),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbVectorList_>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbVectorList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbVectorList = EmbVectorList_;
extern "C" {
    pub fn embVector_normalize(vector: EmbVector, result: *mut EmbVector);
}
extern "C" {
    pub fn embVector_multiply(vector: EmbVector, magnitude: f64, result: *mut EmbVector);
}
extern "C" {
    pub fn embVector_add(v1: EmbVector, v2: EmbVector, result: *mut EmbVector);
}
extern "C" {
    pub fn embVector_getLength(vector: EmbVector) -> f64;
}
extern "C" {
    pub fn embVectorList_create(data: EmbVector) -> *mut EmbVectorList;
}
extern "C" {
    pub fn embVectorList_add(pointer: *mut EmbVectorList, data: EmbVector) -> *mut EmbVectorList;
}
extern "C" {
    pub fn embVectorList_count(pointer: *mut EmbVectorList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embVectorList_empty(pointer: *mut EmbVectorList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embVectorList_free(pointer: *mut EmbVectorList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbLine_ {
    pub x1: f64,
    pub y1: f64,
    pub x2: f64,
    pub y2: f64,
}
#[test]
fn bindgen_test_layout_EmbLine_() {
    assert_eq!(
        ::std::mem::size_of::<EmbLine_>(),
        32usize,
        concat!("Size of: ", stringify!(EmbLine_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbLine_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbLine_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLine_>())).x1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLine_),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLine_>())).y1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLine_),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLine_>())).x2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLine_),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLine_>())).y2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLine_),
            "::",
            stringify!(y2)
        )
    );
}
pub type EmbLine = EmbLine_;
extern "C" {
    pub fn embLine_x1(line: EmbLine) -> f64;
}
extern "C" {
    pub fn embLine_y1(line: EmbLine) -> f64;
}
extern "C" {
    pub fn embLine_x2(line: EmbLine) -> f64;
}
extern "C" {
    pub fn embLine_y2(line: EmbLine) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbLineObject_ {
    pub line: EmbLine,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbLineObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbLineObject_>(),
        40usize,
        concat!("Size of: ", stringify!(EmbLineObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbLineObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbLineObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLineObject_>())).line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLineObject_),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLineObject_>())).lineType as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLineObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLineObject_>())).color as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLineObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbLineObject = EmbLineObject_;
extern "C" {
    pub fn embLineObject_make(x1: f64, y1: f64, x2: f64, y2: f64) -> EmbLineObject;
}
extern "C" {
    pub fn embLineObject_create(x1: f64, y1: f64, x2: f64, y2: f64) -> *mut EmbLineObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbLineObjectList_ {
    pub lineObj: EmbLineObject,
    pub next: *mut EmbLineObjectList_,
}
#[test]
fn bindgen_test_layout_EmbLineObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbLineObjectList_>(),
        48usize,
        concat!("Size of: ", stringify!(EmbLineObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbLineObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbLineObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLineObjectList_>())).lineObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLineObjectList_),
            "::",
            stringify!(lineObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLineObjectList_>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLineObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbLineObjectList = EmbLineObjectList_;
extern "C" {
    pub fn embLineObjectList_create(data: EmbLineObject) -> *mut EmbLineObjectList;
}
extern "C" {
    pub fn embLineObjectList_add(
        pointer: *mut EmbLineObjectList,
        data: EmbLineObject,
    ) -> *mut EmbLineObjectList;
}
extern "C" {
    pub fn embLineObjectList_count(pointer: *mut EmbLineObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embLineObjectList_empty(pointer: *mut EmbLineObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embLineObjectList_free(pointer: *mut EmbLineObjectList);
}
extern "C" {
    pub fn embLine_normalVector(
        vector1: EmbVector,
        vector2: EmbVector,
        result: *mut EmbVector,
        clockwise: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn embLine_intersectionPoint(
        v1: EmbVector,
        v2: EmbVector,
        v3: EmbVector,
        v4: EmbVector,
        result: *mut EmbVector,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPoint_ {
    pub xx: f64,
    pub yy: f64,
}
#[test]
fn bindgen_test_layout_EmbPoint_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPoint_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbPoint_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPoint_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPoint_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPoint_>())).xx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPoint_),
            "::",
            stringify!(xx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPoint_>())).yy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPoint_),
            "::",
            stringify!(yy)
        )
    );
}
pub type EmbPoint = EmbPoint_;
extern "C" {
    pub fn embPoint_x(point: EmbPoint) -> f64;
}
extern "C" {
    pub fn embPoint_y(point: EmbPoint) -> f64;
}
extern "C" {
    pub fn embPoint_make(x: f64, y: f64) -> EmbPoint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPointList_ {
    pub point: EmbPoint,
    pub next: *mut EmbPointList_,
}
#[test]
fn bindgen_test_layout_EmbPointList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPointList_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbPointList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPointList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPointList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPointList_>())).point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPointList_),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPointList_>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPointList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbPointList = EmbPointList_;
extern "C" {
    pub fn embPointList_create(x: f64, y: f64) -> *mut EmbPointList;
}
extern "C" {
    pub fn embPointList_add(pointer: *mut EmbPointList, data: EmbPoint) -> *mut EmbPointList;
}
extern "C" {
    pub fn embPointList_count(pointer: *mut EmbPointList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPointList_empty(pointer: *mut EmbPointList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPointList_free(pointer: *mut EmbPointList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPointObject_ {
    pub point: EmbPoint,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbPointObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPointObject_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbPointObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPointObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPointObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPointObject_>())).point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPointObject_),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPointObject_>())).lineType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPointObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPointObject_>())).color as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPointObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbPointObject = EmbPointObject_;
extern "C" {
    pub fn embPointObject_make(x: f64, y: f64) -> EmbPointObject;
}
extern "C" {
    pub fn embPointObject_create(x: f64, y: f64) -> *mut EmbPointObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPointObjectList_ {
    pub pointObj: EmbPointObject,
    pub next: *mut EmbPointObjectList_,
}
#[test]
fn bindgen_test_layout_EmbPointObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPointObjectList_>(),
        32usize,
        concat!("Size of: ", stringify!(EmbPointObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPointObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPointObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPointObjectList_>())).pointObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPointObjectList_),
            "::",
            stringify!(pointObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPointObjectList_>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPointObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbPointObjectList = EmbPointObjectList_;
extern "C" {
    pub fn embPointObjectList_create(data: EmbPointObject) -> *mut EmbPointObjectList;
}
extern "C" {
    pub fn embPointObjectList_add(
        pointer: *mut EmbPointObjectList,
        data: EmbPointObject,
    ) -> *mut EmbPointObjectList;
}
extern "C" {
    pub fn embPointObjectList_count(pointer: *mut EmbPointObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPointObjectList_empty(pointer: *mut EmbPointObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPointObjectList_free(pointer: *mut EmbPointObjectList);
}
pub type EmbFlag = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbFlagList_ {
    pub flag: ::std::os::raw::c_int,
    pub next: *mut EmbFlagList_,
}
#[test]
fn bindgen_test_layout_EmbFlagList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbFlagList_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbFlagList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbFlagList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbFlagList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFlagList_>())).flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFlagList_),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFlagList_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFlagList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbFlagList = EmbFlagList_;
extern "C" {
    pub fn embFlagList_create(data: EmbFlag) -> *mut EmbFlagList;
}
extern "C" {
    pub fn embFlagList_add(pointer: *mut EmbFlagList, data: EmbFlag) -> *mut EmbFlagList;
}
extern "C" {
    pub fn embFlagList_count(pointer: *mut EmbFlagList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFlagList_empty(pointer: *mut EmbFlagList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFlagList_free(pointer: *mut EmbFlagList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPathObject_ {
    pub pointList: *mut EmbPointList,
    pub flagList: *mut EmbFlagList,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbPathObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPathObject_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbPathObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPathObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPathObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPathObject_>())).pointList as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPathObject_),
            "::",
            stringify!(pointList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPathObject_>())).flagList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPathObject_),
            "::",
            stringify!(flagList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPathObject_>())).lineType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPathObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPathObject_>())).color as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPathObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbPathObject = EmbPathObject_;
extern "C" {
    pub fn embPathObject_create(
        pointList: *mut EmbPointList,
        flagList: *mut EmbFlagList,
        color: EmbColor,
        lineType: ::std::os::raw::c_int,
    ) -> *mut EmbPathObject;
}
extern "C" {
    pub fn embPathObject_free(pointer: *mut EmbPathObject);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPathObjectList_ {
    pub pathObj: *mut EmbPathObject,
    pub next: *mut EmbPathObjectList_,
}
#[test]
fn bindgen_test_layout_EmbPathObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPathObjectList_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbPathObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPathObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPathObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPathObjectList_>())).pathObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPathObjectList_),
            "::",
            stringify!(pathObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPathObjectList_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPathObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbPathObjectList = EmbPathObjectList_;
extern "C" {
    pub fn embPathObjectList_create(data: *mut EmbPathObject) -> *mut EmbPathObjectList;
}
extern "C" {
    pub fn embPathObjectList_add(
        pointer: *mut EmbPathObjectList,
        data: *mut EmbPathObject,
    ) -> *mut EmbPathObjectList;
}
extern "C" {
    pub fn embPathObjectList_count(pointer: *mut EmbPathObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPathObjectList_empty(pointer: *mut EmbPathObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPathObjectList_free(pointer: *mut EmbPathObjectList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPolygonObject_ {
    pub pointList: *mut EmbPointList,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbPolygonObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPolygonObject_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbPolygonObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPolygonObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPolygonObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolygonObject_>())).pointList as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolygonObject_),
            "::",
            stringify!(pointList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolygonObject_>())).lineType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolygonObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolygonObject_>())).color as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolygonObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbPolygonObject = EmbPolygonObject_;
extern "C" {
    pub fn embPolygonObject_create(
        pointList: *mut EmbPointList,
        color: EmbColor,
        lineType: ::std::os::raw::c_int,
    ) -> *mut EmbPolygonObject;
}
extern "C" {
    pub fn embPolygonObject_free(pointer: *mut EmbPolygonObject);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPolygonObjectList_ {
    pub polygonObj: *mut EmbPolygonObject,
    pub next: *mut EmbPolygonObjectList_,
}
#[test]
fn bindgen_test_layout_EmbPolygonObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPolygonObjectList_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbPolygonObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPolygonObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPolygonObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolygonObjectList_>())).polygonObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolygonObjectList_),
            "::",
            stringify!(polygonObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolygonObjectList_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolygonObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbPolygonObjectList = EmbPolygonObjectList_;
extern "C" {
    pub fn embPolygonObjectList_create(data: *mut EmbPolygonObject) -> *mut EmbPolygonObjectList;
}
extern "C" {
    pub fn embPolygonObjectList_add(
        pointer: *mut EmbPolygonObjectList,
        data: *mut EmbPolygonObject,
    ) -> *mut EmbPolygonObjectList;
}
extern "C" {
    pub fn embPolygonObjectList_count(pointer: *mut EmbPolygonObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPolygonObjectList_empty(pointer: *mut EmbPolygonObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPolygonObjectList_free(pointer: *mut EmbPolygonObjectList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPolylineObject_ {
    pub pointList: *mut EmbPointList,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbPolylineObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPolylineObject_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbPolylineObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPolylineObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPolylineObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolylineObject_>())).pointList as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolylineObject_),
            "::",
            stringify!(pointList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolylineObject_>())).lineType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolylineObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolylineObject_>())).color as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolylineObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbPolylineObject = EmbPolylineObject_;
extern "C" {
    pub fn embPolylineObject_create(
        pointList: *mut EmbPointList,
        color: EmbColor,
        lineType: ::std::os::raw::c_int,
    ) -> *mut EmbPolylineObject;
}
extern "C" {
    pub fn embPolylineObject_free(pointer: *mut EmbPolylineObject);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPolylineObjectList_ {
    pub polylineObj: *mut EmbPolylineObject,
    pub next: *mut EmbPolylineObjectList_,
}
#[test]
fn bindgen_test_layout_EmbPolylineObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPolylineObjectList_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbPolylineObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPolylineObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPolylineObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolylineObjectList_>())).polylineObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolylineObjectList_),
            "::",
            stringify!(polylineObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPolylineObjectList_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPolylineObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbPolylineObjectList = EmbPolylineObjectList_;
extern "C" {
    pub fn embPolylineObjectList_create(data: *mut EmbPolylineObject)
        -> *mut EmbPolylineObjectList;
}
extern "C" {
    pub fn embPolylineObjectList_add(
        pointer: *mut EmbPolylineObjectList,
        data: *mut EmbPolylineObject,
    ) -> *mut EmbPolylineObjectList;
}
extern "C" {
    pub fn embPolylineObjectList_count(
        pointer: *mut EmbPolylineObjectList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPolylineObjectList_empty(
        pointer: *mut EmbPolylineObjectList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPolylineObjectList_free(pointer: *mut EmbPolylineObjectList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbRect_ {
    pub top: f64,
    pub left: f64,
    pub bottom: f64,
    pub right: f64,
}
#[test]
fn bindgen_test_layout_EmbRect_() {
    assert_eq!(
        ::std::mem::size_of::<EmbRect_>(),
        32usize,
        concat!("Size of: ", stringify!(EmbRect_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbRect_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbRect_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRect_>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRect_),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRect_>())).left as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRect_),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRect_>())).bottom as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRect_),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRect_>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRect_),
            "::",
            stringify!(right)
        )
    );
}
pub type EmbRect = EmbRect_;
extern "C" {
    pub fn embRect_x(rect: EmbRect) -> f64;
}
extern "C" {
    pub fn embRect_y(rect: EmbRect) -> f64;
}
extern "C" {
    pub fn embRect_width(rect: EmbRect) -> f64;
}
extern "C" {
    pub fn embRect_height(rect: EmbRect) -> f64;
}
extern "C" {
    pub fn embRect_setX(rect: *mut EmbRect, x: f64);
}
extern "C" {
    pub fn embRect_setY(rect: *mut EmbRect, y: f64);
}
extern "C" {
    pub fn embRect_setWidth(rect: *mut EmbRect, w: f64);
}
extern "C" {
    pub fn embRect_setHeight(rect: *mut EmbRect, h: f64);
}
extern "C" {
    pub fn embRect_setCoords(rect: *mut EmbRect, x1: f64, y1: f64, x2: f64, y2: f64);
}
extern "C" {
    pub fn embRect_setRect(rect: *mut EmbRect, x: f64, y: f64, w: f64, h: f64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbRectObject_ {
    pub rect: EmbRect,
    pub rotation: f64,
    pub radius: f64,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbRectObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbRectObject_>(),
        56usize,
        concat!("Size of: ", stringify!(EmbRectObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbRectObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbRectObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRectObject_>())).rect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRectObject_),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRectObject_>())).rotation as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRectObject_),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRectObject_>())).radius as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRectObject_),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRectObject_>())).lineType as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRectObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRectObject_>())).color as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRectObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbRectObject = EmbRectObject_;
extern "C" {
    pub fn embRectObject_make(x: f64, y: f64, w: f64, h: f64) -> EmbRectObject;
}
extern "C" {
    pub fn embRectObject_create(x: f64, y: f64, w: f64, h: f64) -> *mut EmbRectObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbRectObjectList_ {
    pub rectObj: EmbRectObject,
    pub next: *mut EmbRectObjectList_,
}
#[test]
fn bindgen_test_layout_EmbRectObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbRectObjectList_>(),
        64usize,
        concat!("Size of: ", stringify!(EmbRectObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbRectObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbRectObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRectObjectList_>())).rectObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRectObjectList_),
            "::",
            stringify!(rectObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbRectObjectList_>())).next as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbRectObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbRectObjectList = EmbRectObjectList_;
extern "C" {
    pub fn embRectObjectList_create(data: EmbRectObject) -> *mut EmbRectObjectList;
}
extern "C" {
    pub fn embRectObjectList_add(
        pointer: *mut EmbRectObjectList,
        data: EmbRectObject,
    ) -> *mut EmbRectObjectList;
}
extern "C" {
    pub fn embRectObjectList_count(pointer: *mut EmbRectObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embRectObjectList_empty(pointer: *mut EmbRectObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embRectObjectList_free(pointer: *mut EmbRectObjectList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbSettings_ {
    pub dstJumpsPerTrim: ::std::os::raw::c_uint,
    pub home: EmbPoint,
}
#[test]
fn bindgen_test_layout_EmbSettings_() {
    assert_eq!(
        ::std::mem::size_of::<EmbSettings_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbSettings_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbSettings_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbSettings_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSettings_>())).dstJumpsPerTrim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSettings_),
            "::",
            stringify!(dstJumpsPerTrim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSettings_>())).home as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSettings_),
            "::",
            stringify!(home)
        )
    );
}
pub type EmbSettings = EmbSettings_;
extern "C" {
    pub fn embSettings_init() -> EmbSettings;
}
extern "C" {
    pub fn embSettings_home(settings: *mut EmbSettings) -> EmbPoint;
}
extern "C" {
    pub fn embSettings_setHome(settings: *mut EmbSettings, point: EmbPoint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbBezier_ {
    pub startX: f64,
    pub startY: f64,
    pub control1X: f64,
    pub control1Y: f64,
    pub control2X: f64,
    pub control2Y: f64,
    pub endX: f64,
    pub endY: f64,
}
#[test]
fn bindgen_test_layout_EmbBezier_() {
    assert_eq!(
        ::std::mem::size_of::<EmbBezier_>(),
        64usize,
        concat!("Size of: ", stringify!(EmbBezier_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbBezier_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbBezier_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbBezier_>())).startX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbBezier_),
            "::",
            stringify!(startX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbBezier_>())).startY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbBezier_),
            "::",
            stringify!(startY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbBezier_>())).control1X as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbBezier_),
            "::",
            stringify!(control1X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbBezier_>())).control1Y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbBezier_),
            "::",
            stringify!(control1Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbBezier_>())).control2X as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbBezier_),
            "::",
            stringify!(control2X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbBezier_>())).control2Y as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbBezier_),
            "::",
            stringify!(control2Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbBezier_>())).endX as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbBezier_),
            "::",
            stringify!(endX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbBezier_>())).endY as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbBezier_),
            "::",
            stringify!(endY)
        )
    );
}
pub type EmbBezier = EmbBezier_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbSplineObject_ {
    pub bezier: EmbBezier,
    pub next: *mut EmbSplineObject_,
    pub lineType: ::std::os::raw::c_int,
    pub color: EmbColor,
}
#[test]
fn bindgen_test_layout_EmbSplineObject_() {
    assert_eq!(
        ::std::mem::size_of::<EmbSplineObject_>(),
        80usize,
        concat!("Size of: ", stringify!(EmbSplineObject_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbSplineObject_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbSplineObject_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSplineObject_>())).bezier as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSplineObject_),
            "::",
            stringify!(bezier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSplineObject_>())).next as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSplineObject_),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSplineObject_>())).lineType as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSplineObject_),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSplineObject_>())).color as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSplineObject_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbSplineObject = EmbSplineObject_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbSplineObjectList_ {
    pub splineObj: EmbSplineObject,
    pub next: *mut EmbSplineObjectList_,
}
#[test]
fn bindgen_test_layout_EmbSplineObjectList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbSplineObjectList_>(),
        88usize,
        concat!("Size of: ", stringify!(EmbSplineObjectList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbSplineObjectList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbSplineObjectList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSplineObjectList_>())).splineObj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSplineObjectList_),
            "::",
            stringify!(splineObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSplineObjectList_>())).next as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSplineObjectList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbSplineObjectList = EmbSplineObjectList_;
extern "C" {
    pub fn embSplineObjectList_count(pointer: *mut EmbSplineObjectList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embSplineObjectList_empty(pointer: *mut EmbSplineObjectList) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbStitch_ {
    pub flags: ::std::os::raw::c_int,
    pub xx: f64,
    pub yy: f64,
    pub color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_EmbStitch_() {
    assert_eq!(
        ::std::mem::size_of::<EmbStitch_>(),
        32usize,
        concat!("Size of: ", stringify!(EmbStitch_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbStitch_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbStitch_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbStitch_>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbStitch_),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbStitch_>())).xx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbStitch_),
            "::",
            stringify!(xx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbStitch_>())).yy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbStitch_),
            "::",
            stringify!(yy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbStitch_>())).color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbStitch_),
            "::",
            stringify!(color)
        )
    );
}
pub type EmbStitch = EmbStitch_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbStitchList_ {
    pub stitch: EmbStitch_,
    pub next: *mut EmbStitchList_,
}
#[test]
fn bindgen_test_layout_EmbStitchList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbStitchList_>(),
        40usize,
        concat!("Size of: ", stringify!(EmbStitchList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbStitchList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbStitchList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbStitchList_>())).stitch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbStitchList_),
            "::",
            stringify!(stitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbStitchList_>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbStitchList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbStitchList = EmbStitchList_;
extern "C" {
    pub fn embStitchList_create(data: EmbStitch) -> *mut EmbStitchList;
}
extern "C" {
    pub fn embStitchList_add(pointer: *mut EmbStitchList, data: EmbStitch) -> *mut EmbStitchList;
}
extern "C" {
    pub fn embStitchList_count(pointer: *mut EmbStitchList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embStitchList_empty(pointer: *mut EmbStitchList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embStitchList_free(pointer: *mut EmbStitchList);
}
extern "C" {
    pub fn embStitchList_getAt(
        pointer: *mut EmbStitchList,
        num: ::std::os::raw::c_int,
    ) -> EmbStitch;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = f64;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {# [ link_name = "\u{1}signgam" ]    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_1 = 0;
pub const FP_INFINITE: _bindgen_ty_1 = 1;
pub const FP_ZERO: _bindgen_ty_1 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_1 = 3;
pub const FP_NORMAL: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbThread_ {
    pub color: EmbColor,
    pub description: *const ::std::os::raw::c_char,
    pub catalogNumber: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_EmbThread_() {
    assert_eq!(
        ::std::mem::size_of::<EmbThread_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbThread_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbThread_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbThread_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbThread_>())).color as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbThread_),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbThread_>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbThread_),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbThread_>())).catalogNumber as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbThread_),
            "::",
            stringify!(catalogNumber)
        )
    );
}
pub type EmbThread = EmbThread_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbThreadList_ {
    pub thread: EmbThread,
    pub next: *mut EmbThreadList_,
}
#[test]
fn bindgen_test_layout_EmbThreadList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbThreadList_>(),
        32usize,
        concat!("Size of: ", stringify!(EmbThreadList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbThreadList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbThreadList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbThreadList_>())).thread as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbThreadList_),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbThreadList_>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbThreadList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbThreadList = EmbThreadList_;
extern "C" {
    pub fn embThread_findNearestColor(
        color: EmbColor,
        colors: *mut EmbThreadList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embThread_findNearestColorInArray(
        color: EmbColor,
        colorArray: *mut EmbThread,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embThread_getRandom() -> EmbThread;
}
extern "C" {
    pub fn embThreadList_create(data: EmbThread) -> *mut EmbThreadList;
}
extern "C" {
    pub fn embThreadList_add(pointer: *mut EmbThreadList, data: EmbThread) -> *mut EmbThreadList;
}
extern "C" {
    pub fn embThreadList_count(pointer: *mut EmbThreadList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embThreadList_empty(pointer: *mut EmbThreadList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embThreadList_free(pointer: *mut EmbThreadList);
}
extern "C" {
    pub fn embThreadList_getAt(
        pointer: *mut EmbThreadList,
        num: ::std::os::raw::c_int,
    ) -> EmbThread;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbPattern_ {
    pub settings: EmbSettings,
    pub hoop: EmbHoop,
    pub stitchList: *mut EmbStitchList,
    pub threadList: *mut EmbThreadList,
    pub arcObjList: *mut EmbArcObjectList,
    pub circleObjList: *mut EmbCircleObjectList,
    pub ellipseObjList: *mut EmbEllipseObjectList,
    pub lineObjList: *mut EmbLineObjectList,
    pub pathObjList: *mut EmbPathObjectList,
    pub pointObjList: *mut EmbPointObjectList,
    pub polygonObjList: *mut EmbPolygonObjectList,
    pub polylineObjList: *mut EmbPolylineObjectList,
    pub rectObjList: *mut EmbRectObjectList,
    pub splineObjList: *mut EmbSplineObjectList,
    pub lastStitch: *mut EmbStitchList,
    pub lastThread: *mut EmbThreadList,
    pub lastArcObj: *mut EmbArcObjectList,
    pub lastCircleObj: *mut EmbCircleObjectList,
    pub lastEllipseObj: *mut EmbEllipseObjectList,
    pub lastLineObj: *mut EmbLineObjectList,
    pub lastPathObj: *mut EmbPathObjectList,
    pub lastPointObj: *mut EmbPointObjectList,
    pub lastPolygonObj: *mut EmbPolygonObjectList,
    pub lastPolylineObj: *mut EmbPolylineObjectList,
    pub lastRectObj: *mut EmbRectObjectList,
    pub lastSplineObj: *mut EmbSplineObjectList,
    pub currentColorIndex: ::std::os::raw::c_int,
    pub lastX: f64,
    pub lastY: f64,
}
#[test]
fn bindgen_test_layout_EmbPattern_() {
    assert_eq!(
        ::std::mem::size_of::<EmbPattern_>(),
        256usize,
        concat!("Size of: ", stringify!(EmbPattern_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbPattern_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbPattern_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).settings as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(settings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).hoop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(hoop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).stitchList as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(stitchList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).threadList as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(threadList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).arcObjList as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(arcObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).circleObjList as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(circleObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).ellipseObjList as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(ellipseObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lineObjList as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lineObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).pathObjList as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(pathObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).pointObjList as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(pointObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).polygonObjList as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(polygonObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).polylineObjList as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(polylineObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).rectObjList as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(rectObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).splineObjList as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(splineObjList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastStitch as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastStitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastThread as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastThread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastArcObj as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastArcObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastCircleObj as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastCircleObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastEllipseObj as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastEllipseObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastLineObj as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastLineObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastPathObj as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastPathObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastPointObj as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastPointObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastPolygonObj as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastPolygonObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastPolylineObj as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastPolylineObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastRectObj as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastRectObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastSplineObj as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastSplineObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).currentColorIndex as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(currentColorIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastX as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbPattern_>())).lastY as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbPattern_),
            "::",
            stringify!(lastY)
        )
    );
}
pub type EmbPattern = EmbPattern_;
extern "C" {
    pub fn embPattern_create() -> *mut EmbPattern;
}
extern "C" {
    pub fn embPattern_hideStitchesOverLength(p: *mut EmbPattern, length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn embPattern_fixColorCount(p: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_addThread(p: *mut EmbPattern, thread: EmbThread) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPattern_addStitchAbs(
        p: *mut EmbPattern,
        x: f64,
        y: f64,
        flags: ::std::os::raw::c_int,
        isAutoColorIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn embPattern_addStitchRel(
        p: *mut EmbPattern,
        dx: f64,
        dy: f64,
        flags: ::std::os::raw::c_int,
        isAutoColorIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn embPattern_changeColor(p: *mut EmbPattern, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn embPattern_free(p: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_scale(p: *mut EmbPattern, scale: f64);
}
extern "C" {
    pub fn embPattern_calcBoundingBox(p: *mut EmbPattern) -> EmbRect;
}
extern "C" {
    pub fn embPattern_flipHorizontal(p: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_flipVertical(p: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_flip(
        p: *mut EmbPattern,
        horz: ::std::os::raw::c_int,
        vert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn embPattern_combineJumpStitches(p: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_correctForMaxStitchLength(
        p: *mut EmbPattern,
        maxStitchLength: f64,
        maxJumpLength: f64,
    );
}
extern "C" {
    pub fn embPattern_center(p: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_loadExternalColorFile(
        p: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn embPattern_addCircleObjectAbs(p: *mut EmbPattern, cx: f64, cy: f64, r: f64);
}
extern "C" {
    pub fn embPattern_addEllipseObjectAbs(p: *mut EmbPattern, cx: f64, cy: f64, rx: f64, ry: f64);
}
extern "C" {
    pub fn embPattern_addLineObjectAbs(p: *mut EmbPattern, x1: f64, y1: f64, x2: f64, y2: f64);
}
extern "C" {
    pub fn embPattern_addPathObjectAbs(p: *mut EmbPattern, obj: *mut EmbPathObject);
}
extern "C" {
    pub fn embPattern_addPointObjectAbs(p: *mut EmbPattern, x: f64, y: f64);
}
extern "C" {
    pub fn embPattern_addPolygonObjectAbs(p: *mut EmbPattern, obj: *mut EmbPolygonObject);
}
extern "C" {
    pub fn embPattern_addPolylineObjectAbs(p: *mut EmbPattern, obj: *mut EmbPolylineObject);
}
extern "C" {
    pub fn embPattern_addRectObjectAbs(p: *mut EmbPattern, x: f64, y: f64, w: f64, h: f64);
}
extern "C" {
    pub fn embPattern_copyStitchListToPolylines(pattern: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_copyPolylinesToStitchList(pattern: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_moveStitchListToPolylines(pattern: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_movePolylinesToStitchList(pattern: *mut EmbPattern);
}
extern "C" {
    pub fn embPattern_read(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embPattern_write(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn husExpand(
        input: *mut ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        compressedSize: ::std::os::raw::c_int,
        _269: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn husCompress(
        _266: *mut ::std::os::raw::c_uchar,
        _inputSize: ::std::os::raw::c_ulong,
        _267: *mut ::std::os::raw::c_uchar,
        _269: ::std::os::raw::c_int,
        _235: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}_163" ]    pub static mut _163: *mut ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_164" ]    pub static mut _164: *mut ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_165" ]    pub static mut _165: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}_166" ]    pub static mut _166: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}_167" ]    pub static mut _167: [::std::os::raw::c_ushort; 17usize];
}
extern "C" {# [ link_name = "\u{1}_168" ]    pub static mut _168: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_169" ]    pub static mut _169: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_170" ]    pub static mut _170: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_171" ]    pub static mut _171: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_172" ]    pub static mut _172: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_173" ]    pub static mut _173: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_174" ]    pub static mut _174: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_175" ]    pub static mut _175: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_176" ]    pub static mut _176: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_177" ]    pub static mut _177: *mut ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_178" ]    pub static mut _178: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}_179" ]    pub static mut _179: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}_180" ]    pub static mut _180: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}_181" ]    pub static mut _181: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}_182" ]    pub static mut _182: ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_183" ]    pub static mut _183: ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_184" ]    pub static mut _184: ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_185" ]    pub static mut _185: ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_186" ]    pub static mut _186: ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_187" ]    pub static mut _187: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_188" ]    pub static mut _188: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_189" ]    pub static mut _189: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_190" ]    pub static mut _190: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_191" ]    pub static mut _191: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_192" ]    pub static mut _192: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_193" ]    pub static mut _193: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_194" ]    pub static mut _194: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_240" ]    pub static mut _240: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_241" ]    pub static mut _241: *mut ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_243" ]    pub static mut _243: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_244" ]    pub static mut _244: ::std::os::raw::c_ushort;
}
extern "C" {# [ link_name = "\u{1}_245" ]    pub static mut _245: ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}_246" ]    pub static mut _246: ::std::os::raw::c_short;
}
extern "C" {# [ link_name = "\u{1}_531" ]    pub static mut _531: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}_533" ]    pub static mut _533: ::std::os::raw::c_ulong;
}
extern "C" {# [ link_name = "\u{1}_534" ]    pub static mut _534: ::std::os::raw::c_ulong;
}
extern "C" {# [ link_name = "\u{1}mStatus" ]    pub static mut mStatus: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}currentIndex" ]    pub static mut currentIndex: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}remainingBytes" ]    pub static mut remainingBytes: ::std::os::raw::c_long;
}
extern "C" {# [ link_name = "\u{1}inputSize" ]    pub static mut inputSize: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}inputBufferSize" ]    pub static mut inputBufferSize: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}inputLength" ]    pub static mut inputLength: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}outputArray" ]    pub static mut outputArray: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}inputArray" ]    pub static mut inputArray: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}inputBuffer" ]    pub static mut inputBuffer: *mut ::std::os::raw::c_uchar;
}
extern "C" {# [ link_name = "\u{1}currentPosition" ]    pub static mut currentPosition: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}inputPosition" ]    pub static mut inputPosition: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}outputPosition" ]    pub static mut outputPosition: ::std::os::raw::c_int;
}
extern "C" {
    /// HUS Expand Functions
    pub fn husExpand_258(
        _259: ::std::os::raw::c_int,
        _260: *mut ::std::os::raw::c_uchar,
        _261: ::std::os::raw::c_int,
        _262: *mut ::std::os::raw::c_ushort,
        _263: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn husExpand_257();
}
extern "C" {
    pub fn husExpand_256(_219: ::std::os::raw::c_int);
}
extern "C" {
    pub fn husExpand_255();
}
extern "C" {
    pub fn husExpand_253(
        _254: ::std::os::raw::c_short,
        _220: ::std::os::raw::c_short,
        _221: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn husExpand_252(_219: ::std::os::raw::c_int) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn husExpand_251();
}
extern "C" {
    pub fn husExpand_250() -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn husExpand_249() -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn husExpand_expand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn husExpand_cleanup();
}
extern "C" {
    /// HUS Compress Functions
    pub fn husCompress_196();
}
extern "C" {
    pub fn husCompress_197();
}
extern "C" {
    pub fn husCompress_198();
}
extern "C" {
    pub fn husCompress_199(_200: ::std::os::raw::c_short, _201: ::std::os::raw::c_short);
}
extern "C" {
    pub fn husCompress_202(_203: ::std::os::raw::c_ushort, _204: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn husCompress_205();
}
extern "C" {
    pub fn husCompress_206();
}
extern "C" {
    pub fn husCompress_207();
}
extern "C" {
    pub fn husCompress_208(_209: ::std::os::raw::c_int, _203: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn husCompress_210();
}
extern "C" {
    pub fn husCompress_211(
        _212: ::std::os::raw::c_int,
        _213: *mut ::std::os::raw::c_ushort,
        _214: *mut ::std::os::raw::c_uchar,
        _215: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn husCompress_216(_217: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn husCompress_218(
        _219: ::std::os::raw::c_short,
        _220: ::std::os::raw::c_short,
        _221: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn husCompress_222();
}
extern "C" {
    pub fn husCompress_223(_203: ::std::os::raw::c_short);
}
extern "C" {
    pub fn husCompress_224(_204: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn husCompress_225(
        _226: ::std::os::raw::c_int,
        _187: *mut ::std::os::raw::c_ushort,
        _177: *mut ::std::os::raw::c_short,
        _227: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn husCompress_228(_229: ::std::os::raw::c_int);
}
extern "C" {
    pub fn husCompress_230(
        _219: ::std::os::raw::c_int,
        _209: *mut ::std::os::raw::c_uchar,
        _231: *mut ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn husCompress_232(_226: ::std::os::raw::c_int);
}
extern "C" {
    pub fn husCompress_cleanup();
}
extern "C" {
    pub fn husCompress_compress() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbFormatList_ {
    pub extension: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub reader: ::std::os::raw::c_char,
    pub writer: ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub next: *mut EmbFormatList_,
}
#[test]
fn bindgen_test_layout_EmbFormatList_() {
    assert_eq!(
        ::std::mem::size_of::<EmbFormatList_>(),
        32usize,
        concat!("Size of: ", stringify!(EmbFormatList_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbFormatList_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbFormatList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFormatList_>())).extension as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFormatList_),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFormatList_>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFormatList_),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFormatList_>())).reader as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFormatList_),
            "::",
            stringify!(reader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFormatList_>())).writer as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFormatList_),
            "::",
            stringify!(writer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFormatList_>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFormatList_),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbFormatList_>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbFormatList_),
            "::",
            stringify!(next)
        )
    );
}
pub type EmbFormatList = EmbFormatList_;
extern "C" {
    pub fn embFormatList_create() -> *mut EmbFormatList;
}
extern "C" {
    pub fn embFormatList_add(
        pointer: *mut EmbFormatList,
        extension: *mut ::std::os::raw::c_char,
        description: *mut ::std::os::raw::c_char,
        reader: ::std::os::raw::c_char,
        writer: ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *mut EmbFormatList;
}
extern "C" {
    pub fn embFormatList_count(pointer: *mut EmbFormatList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFormatList_empty(pointer: *mut EmbFormatList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFormatList_free(pointer: *mut EmbFormatList);
}
extern "C" {
    pub fn embFormat_extension(pointer: *mut EmbFormatList) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn embFormat_description(pointer: *mut EmbFormatList) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn embFormat_readerState(pointer: *mut EmbFormatList) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn embFormat_writerState(pointer: *mut EmbFormatList) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn embFormat_type(pointer: *mut EmbFormatList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embFormat_extensionFromName(
        fileName: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn embFormat_descriptionFromName(
        fileName: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn embFormat_readerStateFromName(
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn embFormat_writerStateFromName(
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn embFormat_typeFromName(fileName: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KeyValuePair_struct {
    pub key: *const ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut KeyValuePair_struct,
}
#[test]
fn bindgen_test_layout_KeyValuePair_struct() {
    assert_eq!(
        ::std::mem::size_of::<KeyValuePair_struct>(),
        24usize,
        concat!("Size of: ", stringify!(KeyValuePair_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<KeyValuePair_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(KeyValuePair_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<KeyValuePair_struct>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KeyValuePair_struct),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<KeyValuePair_struct>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(KeyValuePair_struct),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<KeyValuePair_struct>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(KeyValuePair_struct),
            "::",
            stringify!(next)
        )
    );
}
pub type KeyValuePair = KeyValuePair_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HashTable {
    pub numOfBuckets: ::std::os::raw::c_long,
    pub numOfElements: ::std::os::raw::c_long,
    pub bucketArray: *mut *mut KeyValuePair,
    pub idealRatio: f32,
    pub lowerRehashThreshold: f32,
    pub upperRehashThreshold: f32,
    pub keycmp: ::std::option::Option<
        unsafe extern "C" fn(key1: *const ::std::os::raw::c_void,
                             key2: *const ::std::os::raw::c_void)
                             -> ::std::os::raw::c_int,
    >,
    pub valuecmp:
        ::std::option::Option<
            unsafe extern "C" fn(value1: *const ::std::os::raw::c_void,
                                 value2: *const ::std::os::raw::c_void)
                                 -> ::std::os::raw::c_int,
        >,
    pub hashFunction:
        ::std::option::Option<
            unsafe extern "C" fn(key: *const ::std::os::raw::c_void)
                                 -> ::std::os::raw::c_ulong,
        >,
    pub keyDeallocator:
        ::std::option::Option<unsafe extern "C" fn(key: *mut ::std::os::raw::c_void)>,
    pub valueDeallocator:
        ::std::option::Option<unsafe extern "C" fn(value: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_HashTable() {
    assert_eq!(
        ::std::mem::size_of::<HashTable>(),
        80usize,
        concat!("Size of: ", stringify!(HashTable))
    );
    assert_eq!(
        ::std::mem::align_of::<HashTable>(),
        8usize,
        concat!("Alignment of ", stringify!(HashTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).numOfBuckets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(numOfBuckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).numOfElements as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(numOfElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).bucketArray as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(bucketArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).idealRatio as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(idealRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).lowerRehashThreshold as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(lowerRehashThreshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).upperRehashThreshold as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(upperRehashThreshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).keycmp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(keycmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).valuecmp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(valuecmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).hashFunction as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(hashFunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).keyDeallocator as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(keyDeallocator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashTable>())).valueDeallocator as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(HashTable),
            "::",
            stringify!(valueDeallocator)
        )
    );
}
extern "C" {
    pub fn HashTableCreate(numOfBuckets: ::std::os::raw::c_long) -> *mut HashTable;
}
extern "C" {
    pub fn HashTableDestroy(hashTable: *mut HashTable);
}
extern "C" {
    pub fn HashTableContainsKey(
        hashTable: *const HashTable,
        key: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HashTableContainsValue(
        hashTable: *const HashTable,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HashTablePut(
        hashTable: *mut HashTable,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HashTableGet(
        hashTable: *const HashTable,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn HashTableRemove(hashTable: *mut HashTable, key: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn HashTableRemoveAll(hashTable: *mut HashTable);
}
extern "C" {
    pub fn HashTableIsEmpty(hashTable: *const HashTable) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HashTableSize(hashTable: *const HashTable) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HashTableGetNumBuckets(hashTable: *const HashTable) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HashTableSetKeyComparisonFunction(
        hashTable: *mut HashTable,
        keycmp: ::std::option::Option<
            unsafe extern "C" fn(key1: *const ::std::os::raw::c_void,
                                 key2: *const ::std::os::raw::c_void)
                                 -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn HashTableSetValueComparisonFunction(
        hashTable: *mut HashTable,
        valuecmp: ::std::option::Option<
            unsafe extern "C" fn(value1: *const ::std::os::raw::c_void,
                                 value2: *const ::std::os::raw::c_void)
                                 -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    ;
}
extern "C" {
    pub fn HashTableRehash(hashTable: *mut HashTable, numOfBuckets: ::std::os::raw::c_long);
}
extern "C" {
    pub fn HashTableSetIdealRatio(
        hashTable: *mut HashTable,
        idealRatio: f32,
        lowerRehashThreshold: f32,
        upperRehashThreshold: f32,
    );
}
extern "C" {
    ;
}
extern "C" {
    pub fn HashTableStringHashFunction(
        key: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_ulong;
}
pub type EmbHash = HashTable;
extern "C" {
    pub fn embHash_create() -> *mut EmbHash;
}
extern "C" {
    pub fn embHash_free(hash: *mut EmbHash);
}
extern "C" {
    pub fn embHash_contains(
        hash: *const EmbHash,
        key: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embHash_insert(
        hash: *mut EmbHash,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embHash_value(
        hash: *const EmbHash,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn embHash_remove(hash: *mut EmbHash, key: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn embHash_clear(hash: *mut EmbHash);
}
extern "C" {
    pub fn embHash_empty(hash: *const EmbHash) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn embHash_count(hash: *const EmbHash) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn embHash_rehash(hash: *mut EmbHash, numOfBuckets: ::std::os::raw::c_long);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbLayer_ {
    pub color: EmbColor,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_EmbLayer_() {
    assert_eq!(
        ::std::mem::size_of::<EmbLayer_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbLayer_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbLayer_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbLayer_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLayer_>())).color as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLayer_),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbLayer_>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbLayer_),
            "::",
            stringify!(name)
        )
    );
}
pub type EmbLayer = EmbLayer_;
extern "C" {
    pub fn embLog_print(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn embLog_error(format: *const ::std::os::raw::c_char, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbReaderWriter_ {
    pub reader: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut EmbPattern,
                             arg2: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int,
    >,
    pub writer: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut EmbPattern,
                             arg2: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_EmbReaderWriter_() {
    assert_eq!(
        ::std::mem::size_of::<EmbReaderWriter_>(),
        16usize,
        concat!("Size of: ", stringify!(EmbReaderWriter_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbReaderWriter_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbReaderWriter_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbReaderWriter_>())).reader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbReaderWriter_),
            "::",
            stringify!(reader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbReaderWriter_>())).writer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbReaderWriter_),
            "::",
            stringify!(writer)
        )
    );
}
pub type EmbReaderWriter = EmbReaderWriter_;
extern "C" {
    pub fn embReaderWriter_getByFileName(
        fileName: *const ::std::os::raw::c_char,
    ) -> *mut EmbReaderWriter;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmbSatinOutline_ {
    pub length: ::std::os::raw::c_int,
    pub side1: *mut EmbVector,
    pub side2: *mut EmbVector,
}
#[test]
fn bindgen_test_layout_EmbSatinOutline_() {
    assert_eq!(
        ::std::mem::size_of::<EmbSatinOutline_>(),
        24usize,
        concat!("Size of: ", stringify!(EmbSatinOutline_))
    );
    assert_eq!(
        ::std::mem::align_of::<EmbSatinOutline_>(),
        8usize,
        concat!("Alignment of ", stringify!(EmbSatinOutline_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSatinOutline_>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSatinOutline_),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSatinOutline_>())).side1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSatinOutline_),
            "::",
            stringify!(side1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmbSatinOutline_>())).side2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EmbSatinOutline_),
            "::",
            stringify!(side2)
        )
    );
}
pub type EmbSatinOutline = EmbSatinOutline_;
extern "C" {
    pub fn embSatinOutline_generateSatinOutline(
        lines: *mut EmbVector,
        numberOfPoints: ::std::os::raw::c_int,
        thickness: f64,
        result: *mut EmbSatinOutline,
    );
}
extern "C" {
    pub fn embSatinOutline_renderStitches(
        result: *mut EmbSatinOutline,
        density: f64,
    ) -> *mut EmbVectorList;
}
extern "C" {
    pub fn binaryReadByte(file: *mut EmbFile) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn binaryReadBytes(
        file: *mut EmbFile,
        destination: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn binaryReadInt16(file: *mut EmbFile) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn binaryReadInt32(file: *mut EmbFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn binaryReadUInt8(file: *mut EmbFile) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn binaryReadUInt16(file: *mut EmbFile) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn binaryReadUInt32(file: *mut EmbFile) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn binaryReadInt16BE(file: *mut EmbFile) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn binaryReadUInt16BE(file: *mut EmbFile) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn binaryReadInt32BE(file: *mut EmbFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn binaryReadUInt32BE(file: *mut EmbFile) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn binaryReadFloat(file: *mut EmbFile) -> f32;
}
extern "C" {
    pub fn binaryReadString(
        file: *mut EmbFile,
        buffer: *mut ::std::os::raw::c_char,
        maxLength: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn binaryReadUnicodeString(
        file: *mut EmbFile,
        buffer: *mut ::std::os::raw::c_char,
        stringLength: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn binaryWriteByte(file: *mut EmbFile, data: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn binaryWriteBytes(
        file: *mut EmbFile,
        data: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn binaryWriteShort(file: *mut EmbFile, data: ::std::os::raw::c_short);
}
extern "C" {
    pub fn binaryWriteShortBE(file: *mut EmbFile, data: ::std::os::raw::c_short);
}
extern "C" {
    pub fn binaryWriteUShort(file: *mut EmbFile, data: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn binaryWriteUShortBE(file: *mut EmbFile, data: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn binaryWriteInt(file: *mut EmbFile, data: ::std::os::raw::c_int);
}
extern "C" {
    pub fn binaryWriteIntBE(file: *mut EmbFile, data: ::std::os::raw::c_int);
}
extern "C" {
    pub fn binaryWriteUInt(file: *mut EmbFile, data: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn binaryWriteUIntBE(file: *mut EmbFile, data: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn binaryWriteFloat(file: *mut EmbFile, data: f32);
}
extern "C" {
    pub fn roundDouble(src: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn startsWith(
        pre: *const ::std::os::raw::c_char,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn rTrim(
        str: *mut ::std::os::raw::c_char,
        junk: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lTrim(
        str: *mut ::std::os::raw::c_char,
        junk: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn copy_trim(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inplace_trim(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn emb_optOut(num: f64, str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn emb_strdup(src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub const ThreadBrand_Arc_Polyester: ThreadBrand = 0;
pub const ThreadBrand_Arc_Rayon: ThreadBrand = 1;
pub const ThreadBrand_CoatsAndClark_Rayon: ThreadBrand = 2;
pub const ThreadBrand_Exquisite_Polyester: ThreadBrand = 3;
pub const ThreadBrand_Fufu_Polyester: ThreadBrand = 4;
pub const ThreadBrand_Fufu_Rayon: ThreadBrand = 5;
pub const ThreadBrand_Hemingworth_Polyester: ThreadBrand = 6;
pub const ThreadBrand_Isacord_Polyester: ThreadBrand = 7;
pub const ThreadBrand_Isafil_Rayon: ThreadBrand = 8;
pub const ThreadBrand_Marathon_Polyester: ThreadBrand = 9;
pub const ThreadBrand_Marathon_Rayon: ThreadBrand = 10;
pub const ThreadBrand_Madeira_Polyester: ThreadBrand = 11;
pub const ThreadBrand_Madeira_Rayon: ThreadBrand = 12;
pub const ThreadBrand_Metro_Polyester: ThreadBrand = 13;
pub const ThreadBrand_Pantone: ThreadBrand = 14;
pub const ThreadBrand_RobisonAnton_Polyester: ThreadBrand = 15;
pub const ThreadBrand_RobisonAnton_Rayon: ThreadBrand = 16;
pub const ThreadBrand_Sigma_Polyester: ThreadBrand = 17;
pub const ThreadBrand_Sulky_Rayon: ThreadBrand = 18;
pub const ThreadBrand_ThreadArt_Rayon: ThreadBrand = 19;
pub const ThreadBrand_ThreadArt_Polyester: ThreadBrand = 20;
pub const ThreadBrand_ThreaDelight_Polyester: ThreadBrand = 21;
pub const ThreadBrand_Z102_Isacord_Polyester: ThreadBrand = 22;
pub type ThreadBrand = u32;
extern "C" {
    pub fn threadColorNum(
        color: ::std::os::raw::c_uint,
        brand: ThreadBrand,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn threadColorName(
        color: ::std::os::raw::c_uint,
        brand: ThreadBrand,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn read10o(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write10o(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read100(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write100(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readArt(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeArt(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readBmc(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeBmc(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readBro(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeBro(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readCnd(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCnd(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readCol(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCol(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readCsd(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCsd(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const CSV_EXPECT_CSV_EXPECT_NULL: CSV_EXPECT = 0;
pub const CSV_EXPECT_CSV_EXPECT_QUOTE1: CSV_EXPECT = 1;
pub const CSV_EXPECT_CSV_EXPECT_QUOTE2: CSV_EXPECT = 2;
pub const CSV_EXPECT_CSV_EXPECT_COMMA: CSV_EXPECT = 3;
pub type CSV_EXPECT = u32;
pub const CSV_MODE_CSV_MODE_NULL: CSV_MODE = 0;
pub const CSV_MODE_CSV_MODE_COMMENT: CSV_MODE = 1;
pub const CSV_MODE_CSV_MODE_VARIABLE: CSV_MODE = 2;
pub const CSV_MODE_CSV_MODE_THREAD: CSV_MODE = 3;
pub const CSV_MODE_CSV_MODE_STITCH: CSV_MODE = 4;
pub type CSV_MODE = u32;
extern "C" {
    pub fn readCsv(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCsv(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readDat(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeDat(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readDem(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeDem(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readDsb(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeDsb(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readDst(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeDst(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readDsz(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeDsz(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readDxf(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeDxf(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readEdr(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeEdr(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readEmd(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeEmd(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readExp(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeExp(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readExy(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeExy(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readEys(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeEys(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readFxy(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeFxy(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readGc(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeGc(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readGnc(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeGnc(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readGt(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeGt(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// EmbReaderWriter Functions
    pub fn readHus(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeHus(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const husThreadCount: ::std::os::raw::c_int = 29;
extern "C" {# [ link_name = "\u{1}husThreads" ]    pub static mut husThreads: [EmbThread; 29usize];
}
extern "C" {
    pub fn readInb(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeInb(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readInf(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeInf(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readJef(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeJef(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}jefThreads" ]    pub static mut jefThreads: [EmbThread; 79usize];
}
extern "C" {
    pub fn readKsm(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeKsm(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readMax(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeMax(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readMit(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeMit(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readNew(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeNew(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readOfm(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeOfm(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPcd(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePcd(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPcm(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePcm(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const pcmThreadCount: ::std::os::raw::c_int = 65;
extern "C" {# [ link_name = "\u{1}pcmThreads" ]    pub static mut pcmThreads: [EmbThread; 16usize];
}
extern "C" {
    pub fn readPcq(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePcq(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPcs(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePcs(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPec(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePec(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPecStitches(pattern: *mut EmbPattern, file: *mut EmbFile);
}
extern "C" {
    pub fn writePecStitches(
        pattern: *mut EmbPattern,
        file: *mut EmbFile,
        filename: *const ::std::os::raw::c_char,
    );
}
pub const pecThreadCount: ::std::os::raw::c_int = 65;
extern "C" {# [ link_name = "\u{1}pecThreads" ]    pub static mut pecThreads: [EmbThread; 65usize];
}
extern "C" {# [ link_name = "\u{1}imageWithFrame" ]    pub static mut imageWithFrame: [[::std::os::raw::c_char; 48usize]; 38usize];
}
extern "C" {
    pub fn readPel(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePel(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPem(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePem(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPes(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePes(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPhb(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePhb(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPhc(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePhc(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readPlt(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writePlt(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readRgb(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeRgb(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readSew(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeSew(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readShv(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeShv(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const shvThreadCount: ::std::os::raw::c_int = 42;
extern "C" {# [ link_name = "\u{1}shvThreads" ]    pub static mut shvThreads: [EmbThread; 43usize];
}
extern "C" {
    pub fn readSst(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeSst(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readStx(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeStx(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type SvgAttribute = SvgAttribute_;
pub type SvgAttributeList = SvgAttributeList_;
pub type SvgElement = SvgElement_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SvgAttribute_ {
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SvgAttribute_() {
    assert_eq!(
        ::std::mem::size_of::<SvgAttribute_>(),
        16usize,
        concat!("Size of: ", stringify!(SvgAttribute_))
    );
    assert_eq!(
        ::std::mem::align_of::<SvgAttribute_>(),
        8usize,
        concat!("Alignment of ", stringify!(SvgAttribute_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SvgAttribute_>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SvgAttribute_),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SvgAttribute_>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SvgAttribute_),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SvgAttributeList_ {
    pub attribute: SvgAttribute,
    pub next: *mut SvgAttributeList,
}
#[test]
fn bindgen_test_layout_SvgAttributeList_() {
    assert_eq!(
        ::std::mem::size_of::<SvgAttributeList_>(),
        24usize,
        concat!("Size of: ", stringify!(SvgAttributeList_))
    );
    assert_eq!(
        ::std::mem::align_of::<SvgAttributeList_>(),
        8usize,
        concat!("Alignment of ", stringify!(SvgAttributeList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SvgAttributeList_>())).attribute as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SvgAttributeList_),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SvgAttributeList_>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SvgAttributeList_),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SvgElement_ {
    pub name: *mut ::std::os::raw::c_char,
    pub attributeList: *mut SvgAttributeList,
    pub lastAttribute: *mut SvgAttributeList,
}
#[test]
fn bindgen_test_layout_SvgElement_() {
    assert_eq!(
        ::std::mem::size_of::<SvgElement_>(),
        24usize,
        concat!("Size of: ", stringify!(SvgElement_))
    );
    assert_eq!(
        ::std::mem::align_of::<SvgElement_>(),
        8usize,
        concat!("Alignment of ", stringify!(SvgElement_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SvgElement_>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SvgElement_),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SvgElement_>())).attributeList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SvgElement_),
            "::",
            stringify!(attributeList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SvgElement_>())).lastAttribute as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SvgElement_),
            "::",
            stringify!(lastAttribute)
        )
    );
}
pub const SVG_CREATOR_SVG_CREATOR_NULL: SVG_CREATOR = 0;
pub const SVG_CREATOR_SVG_CREATOR_EMBROIDERMODDER: SVG_CREATOR = 1;
pub const SVG_CREATOR_SVG_CREATOR_ILLUSTRATOR: SVG_CREATOR = 2;
pub const SVG_CREATOR_SVG_CREATOR_INKSCAPE: SVG_CREATOR = 3;
pub type SVG_CREATOR = u32;
pub const SVG_EXPECT_SVG_EXPECT_NULL: SVG_EXPECT = 0;
pub const SVG_EXPECT_SVG_EXPECT_ELEMENT: SVG_EXPECT = 1;
pub const SVG_EXPECT_SVG_EXPECT_ATTRIBUTE: SVG_EXPECT = 2;
pub const SVG_EXPECT_SVG_EXPECT_VALUE: SVG_EXPECT = 3;
pub type SVG_EXPECT = u32;
pub const SVG_TYPES_SVG_NULL: SVG_TYPES = 0;
pub const SVG_TYPES_SVG_ELEMENT: SVG_TYPES = 1;
pub const SVG_TYPES_SVG_PROPERTY: SVG_TYPES = 2;
pub const SVG_TYPES_SVG_MEDIA_PROPERTY: SVG_TYPES = 3;
pub const SVG_TYPES_SVG_ATTRIBUTE: SVG_TYPES = 4;
pub const SVG_TYPES_SVG_CATCH_ALL: SVG_TYPES = 5;
pub type SVG_TYPES = u32;
extern "C" {
    pub fn readSvg(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeSvg(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}svgCreator" ]    pub static mut svgCreator: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}svgExpect" ]    pub static mut svgExpect: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}svgMultiValue" ]    pub static mut svgMultiValue: ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}currentElement" ]    pub static mut currentElement: *mut SvgElement;
}
extern "C" {# [ link_name = "\u{1}currentAttribute" ]    pub static mut currentAttribute: *mut ::std::os::raw::c_char;
}
extern "C" {# [ link_name = "\u{1}currentValue" ]    pub static mut currentValue: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn readT01(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeT01(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readT09(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeT09(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readTap(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeTap(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readThr(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeThr(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readTxt(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeTxt(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readU00(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeU00(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readU01(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeU01(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readVip(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeVip(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {# [ link_name = "\u{1}vipDecodingTable" ]    pub static mut vipDecodingTable: [::std::os::raw::c_uchar; 400usize];
}
extern "C" {
    pub fn readVp3(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeVp3(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readXxx(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeXxx(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readZsk(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeZsk(
        pattern: *mut EmbPattern,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
